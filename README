فاز سوم پروژه کامپایلر
در این قسمت به توضیح روند ها و تصمیمات مربوطه به آن میپردازیم.
در برنامه سه کلاس اصلی وجود دارد یکی برای نگه داشتن ساختار کلاس، دیگری برای نگه داشتن ساختار
 درخت و کلاس دیگر برای نگه داشتن اطلاعات مربوط به یک کلاس در هنگام اجرای سمنتیک.

تعداد حرکت روی درخت : 5 بار
برای راحتی و تمیزی بیشتر تعداد حرکت های بیش از معمولی بر روی درخت انجام شده است


حرکت اول:
اضافه کردن نام کلاس های موجود در برنامه و بررسی تکرار دوباره تعریف کلاس
در صورت وجود دو تعریف، تعریف اول مدنظر قرار میگیرد.

حرکت دوم:
اضافه کردن خاصیت ارث بری در کلاس ها و بررسی وجود کلاس ارث برده شده



حرکت سوم:
در این حرکت به دنبال متدهای تعریف شده در هرکلاس میگردیم و نام تایپ های
 ورودی و خروجی متد را به آبجکت کلاس اضافه میکنیم.

حرکت چهارم:
مشابه حرکت سوم اما روی اتربیوت های کلاس ها حرکت میکنیم و نام و تایپ آن را
 به آبچکت کلاس اضافه میکنیم.

حرکت پنجم:
در این حرکت هرچه میخواستیم نگه داریم کامل شده و حال به سمنت کل درخت با 
حرکت روی آن میپردازیم




برای سمنت اتربیوت ها همچنان که قواعد منطقی گفته بود عمل میکنیم و با داشتن 
اینویرمنت تمام اتربیوت ها تطبیبق تایپ را برای یک اتربیوت به عمل می اوریم
برای سمنت متد ها ابتدا به اینوایرمنت فرمال پارامترها را با تایپ تعریف شده شان 
اور رایت میکنیم و سپس به سمنت داخل متد میپردازیم و پس از آن تایپ خروجی متد را چک میکنیم.

چه چیزی درست کار نمیکند؟

لاین ارور همیشه خط اول را نمایش میدهد. میتواند به دلیل استفاده نکردن از کلاس تیبل تعریف شده باشد.

فایلی که کلاس در آن نگه داری شده درنظر گرفته نمیشود و ارور های داده شده به نام فایل اشاره نمیکنند.

رابطه ساب تایپ بودن درصورت سلف تایپ بودن در همه جا درست کار نمیکند چون تابع مربوطه این را تشخیص نمیدهد

 و فقط در بعضی قسمت ها هندل خارجی برای آنها نوشته شده است.

چه چیزی میتوانست بهتر انجام شود؟

هنگام درخواست تایپ نود از درخت بهتر بود خروجی به جای استرینگ از تایپ سیمبل باشد.